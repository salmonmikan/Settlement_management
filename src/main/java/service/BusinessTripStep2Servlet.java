package service;

import java.io.File;
import java.io.IOException;
import java.io.InputStream;
import java.nio.file.Files;
import java.nio.file.Paths;
import java.nio.file.StandardCopyOption;
import java.util.Collection;
import java.util.List;
import java.util.UUID;
import java.util.stream.Collectors;

import jakarta.servlet.ServletException;
import jakarta.servlet.annotation.MultipartConfig;
import jakarta.servlet.annotation.WebServlet;
import jakarta.servlet.http.HttpServlet;
import jakarta.servlet.http.HttpServletRequest;
import jakarta.servlet.http.HttpServletResponse;
import jakarta.servlet.http.HttpSession;
import jakarta.servlet.http.Part;

import bean.BusinessTripBean;
import bean.Step2Detail;
import bean.UploadedFile;

/**
 * 出張申請ステップ2（宿泊・日当）の処理を担当するサーブレット。
 * <p>
 * - doGet(): セッションからBeanを取得し、Step2画面に表示<br>
 * - doPost(): フォームデータとファイルを受け取り、Beanへ格納して次画面へ進む
 * 【Generated by ChatGPT】
 */
@WebServlet("/businessTripStep2")
@MultipartConfig(fileSizeThreshold = 1024 * 1024, maxFileSize = 1024 * 1024 * 10, maxRequestSize = 1024 * 1024 * 15)
public class BusinessTripStep2Servlet extends HttpServlet {
    private static final long serialVersionUID = 1L;
    private static final String TEMP_UPLOAD_DIR = "/temp_uploads";

    @Override
    protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        HttpSession session = request.getSession(false);
        if (session == null || session.getAttribute("trip") == null) {
            response.sendRedirect(request.getContextPath() + "/businessTripInit");
            return;
        }

        BusinessTripBean trip = (BusinessTripBean) session.getAttribute("trip");

        if (trip.getStep2Details().isEmpty()) {
            trip.getStep2Details().add(new Step2Detail());
        }

        request.setAttribute("trip", trip);
        request.getRequestDispatcher("/WEB-INF/views/serviceJSP/businessTrip2.jsp").forward(request, response);
    }
    
 // Trong file service/BusinessTripStep2Servlet.java
    @Override
    protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        request.setCharacterEncoding("UTF-8");
        HttpSession session = request.getSession(false);

        if (session == null || session.getAttribute("trip") == null) {
            response.sendRedirect(request.getContextPath() + "/businessTripInit");
            return;
        }

        BusinessTripBean trip = (BusinessTripBean) session.getAttribute("trip");

        // Xử lý khi người dùng bấm "Quay lại"
        String action = request.getParameter("action");
        if ("go_back".equals(action)) {
            // Lưu trạng thái hiện tại trước khi quay lại
            // (Phần này quan trọng để không mất dữ liệu khi back)
        }

        // 1. Xử lý các file đã tồn tại bị xóa
        String filesToDeleteParam = request.getParameter("filesToDelete");
        if (filesToDeleteParam != null && !filesToDeleteParam.isEmpty()) {
            List<String> filesToDeleteList = List.of(filesToDeleteParam.split(","));
            String realPath = getServletContext().getRealPath("");
            for (Step2Detail detail : trip.getStep2Details()) {
                detail.getTemporaryFiles().stream()
                    .filter(file -> filesToDeleteList.contains(file.getUniqueStoredName()))
                    .forEach(file -> {
                        try {
                            Files.deleteIfExists(Paths.get(realPath + file.getTemporaryPath()));
                        } catch (IOException e) {
                            System.err.println("Không thể xoá file tạm: " + e.getMessage());
                        }
                    });
                detail.getTemporaryFiles().removeIf(file -> filesToDeleteList.contains(file.getUniqueStoredName()));
            }
        }

        // 2. Lấy dữ liệu từ form
        List<Step2Detail> detailsInSession = trip.getStep2Details();
        String[] regionTypes = request.getParameterValues("regionType[]");
        int numSubmittedBlocks = (regionTypes != null) ? regionTypes.length : 0;

        // 3. Xóa các block trong session nếu người dùng đã xóa trên giao diện
        while (detailsInSession.size() > numSubmittedBlocks) {
            detailsInSession.remove(detailsInSession.size() - 1);
        }

        // 4. Cập nhật hoặc thêm mới chi tiết cho từng block
        String[] tripTypes = request.getParameterValues("tripType[]");
        String[] hotels = request.getParameterValues("hotel[]");
        String[] burdens = request.getParameterValues("burden[]");
        String[] hotelFees = request.getParameterValues("hotelFee[]");
        String[] dailyAllowances = request.getParameterValues("dailyAllowance[]");
        String[] days = request.getParameterValues("days[]");
        String[] expenseTotals = request.getParameterValues("expenseTotal[]");
        String[] memos = request.getParameterValues("memo[]");

        for (int i = 0; i < numSubmittedBlocks; i++) {
            Step2Detail detail;
            if (i < detailsInSession.size()) {
                // Cập nhật block đã có trong session
                detail = detailsInSession.get(i);
            } else {
                // Tạo block mới và thêm vào session
                detail = new Step2Detail();
                detailsInSession.add(detail);
            }

            // Cập nhật các trường dữ liệu text/number/select
            detail.setRegionType(regionTypes[i]);
            detail.setTripType(tripTypes[i]);
            detail.setHotel(hotels[i]);
            detail.setBurden(burdens[i]);
            detail.setHotelFee(Integer.parseInt(hotelFees[i]));
            detail.setDailyAllowance(Integer.parseInt(dailyAllowances[i]));
            detail.setDays(Integer.parseInt(days[i]));
            detail.setExpenseTotal(Integer.parseInt(expenseTotals[i]));
            detail.setMemo(memos[i]);

            // ★★★ PHẦN SỬA LỖI QUAN TRỌNG NHẤT LÀ ĐÂY ★★★
            // Đọc trạng thái của các checkbox cho block thứ 'i' và lưu vào bean
            boolean isHalfDay = request.getParameter("adjustmentHalfDay_" + i) != null;
            boolean isBonus = request.getParameter("adjustmentBonus_" + i) != null;
            boolean isNone = request.getParameter("adjustmentNone_" + i) != null;
            
            detail.setAdjustmentHalfDay(isHalfDay);
            detail.setAdjustmentBonus(isBonus);
            detail.setAdjustmentNone(isNone);
        }

        // 5. Xử lý các file MỚI được tải lên (giữ nguyên logic của bạn)
        try {
            Collection<Part> allParts = request.getParts();
            for (int i = 0; i < numSubmittedBlocks; i++) {
                String fileInputName = "receipt_allowance_" + i;
                List<Part> newFileParts = allParts.stream()
                    .filter(part -> fileInputName.equals(part.getName()) && part.getSize() > 0)
                    .collect(Collectors.toList());

                if (!newFileParts.isEmpty()) {
                    Step2Detail detail = detailsInSession.get(i);
                    // Xử lý upload file mới
                    String absoluteUploadPath = getServletContext().getRealPath(TEMP_UPLOAD_DIR);
                    File uploadDir = new File(absoluteUploadPath);
                    if (!uploadDir.exists()) uploadDir.mkdirs();

                    // Xóa các file tạm cũ trong bean trước khi thêm file mới
                    detail.getTemporaryFiles().clear(); 
                    
                    for (Part filePart : newFileParts) {
                        String originalFileName = Paths.get(filePart.getSubmittedFileName()).getFileName().toString();
                        String uniqueFileName = UUID.randomUUID().toString() + "_" + originalFileName;
                        File savedFile = new File(uploadDir, uniqueFileName);
                        try (InputStream input = filePart.getInputStream()) {
                            Files.copy(input, savedFile.toPath(), StandardCopyOption.REPLACE_EXISTING);
                        }
                        UploadedFile uploadedFile = new UploadedFile();
                        uploadedFile.setOriginalFileName(originalFileName);
                        uploadedFile.setUniqueStoredName(uniqueFileName);
                        uploadedFile.setTemporaryPath(TEMP_UPLOAD_DIR + "/" + uniqueFileName);
                        detail.getTemporaryFiles().add(uploadedFile);
                    }
                }
            }
        } catch (Exception e) {
            // Nên có log lỗi ở đây để dễ debug
            System.err.println("Lỗi nghiêm trọng khi xử lý file upload ở Step 2: " + e.getMessage());
            e.printStackTrace();
            // Có thể thêm báo lỗi ra view
        }
        
        // 6. Lưu bean đã cập nhật vào session và chuyển hướng
        session.setAttribute("trip", trip);
        if ("go_back".equals(action)) {
            response.sendRedirect(request.getContextPath() + "/businessTripStep1");
        } else {
            response.sendRedirect(request.getContextPath() + "/businessTripStep3");
        }
    }
}